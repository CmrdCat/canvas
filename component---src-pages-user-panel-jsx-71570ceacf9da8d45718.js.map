{"version":3,"sources":["webpack:///./src/pages/userPanel.jsx","webpack:///./src/components/canvas/UserTableRender.jsx","webpack:///./src/components/canvas/UserPanelTableRender.jsx"],"names":["userTableRender","bgImage","fbData","setTable","blockedTables","useState","answer","setData","loadedTables","loadTables","useEffect","fetchData","a","storage","firebase","storageRef","ref","child","getDownloadURL","then","result","load","database","once","snapshot","val","console","log","canvas","document","getElementById","app","PIXI","width","height","backgroundColor","innerHTML","appendChild","view","backgroundImage","from","background","stage","addChild","screen","activeTable","map","el","container","type","x","y","texture","table","index","id","uniqueId","info","anchor","set","scale","scaleX","scaleY","rotation","includes","buttonMode","interactive","tint","alpha","on","ev","target","forEach","discription","description","price","text","font","fill","align","cacheAsBitmap","errorMessage","localStorage","getItem","ReactDOM","render","createCanvas","setItem","userPanelTableRender","setfbData","style","display","flexDirection","UserTableRender","tables"],"mappings":"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","file":"component---src-pages-user-panel-jsx-71570ceacf9da8d45718.js","sourcesContent":["import React from 'react';\nimport Layout from '../components/layout';\nimport '../styles/canvas.scss';\nimport UserPanelTableRender from '../components/canvas/UserPanelTableRender';\n\nexport default () => (\n  <>\n    <Layout>\n      <UserPanelTableRender />\n    </Layout>\n  </>\n);\n","/* eslint-disable */\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom'\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport * as PIXI from 'pixi.js';\n\nconst userTableRender = ({ \n   bgImage, fbData, setTable, blockedTables\n   \n}) => { \n   const [answer, setData] = useState(0);\n   const [loadedTables, loadTables] = useState(0);\n\n   useEffect(() => {\n      const fetchData = async () => {\n         const storage = firebase.storage();\n         const storageRef = storage.ref();\n         const imgURL = storageRef.child(`${bgImage}`);\n         // Get the download URL\n         imgURL.getDownloadURL().then((result) => {\n            setData(result);\n         });\n      };\n      const load = async () => {\n         const result = await firebase.database().ref('saved-tables').once('value').then((snapshot) => snapshot.val());\n         loadTables(result);\n      };\n      fetchData();\n      load();\n   }, []);\n\n   function createCanvas() {\n      console.log('blockedTables: ', blockedTables);\n      const canvas = document.getElementById('canvasWrapper')\n\n      const app = new PIXI.Application({\n         width: 1000,\n         height: 620,\n         backgroundColor: 0x5BBA6F,\n      });\n\n      canvas.innerHTML = '';\n      canvas.appendChild(app.view);\n\n      const backgroundImage = PIXI.Texture.from(answer);\n      const background = new PIXI.Sprite(backgroundImage);\n      app.stage.addChild(background);\n      background.width = app.screen.width;\n      background.height = app.screen.height;\n\n      if (loadedTables !== null) {\n         let activeTable;\n\n         loadedTables.map(el => {\n            const container = new PIXI.Container();\n            container.type = 'container'\n\n            container.x = el.x;\n            container.y = el.y;\n\n            const texture = PIXI.Texture.from(el.texture)\n            const table = new PIXI.Sprite(texture);\n            table.type = 'table'\n            table.index = el.index;\n            table.id = el.id\n            table.uniqueId = el.uniqueId\n            table.info = el.info;\n\n            table.anchor.set(0.5);\n            table.scale.x = el.scaleX;\n            table.scale.y = el.scaleY;\n            table.rotation = el.rotation;\n\n            if (blockedTables.includes(table.uniqueId)) {\n               table.buttonMode = false;\n               table.interactive = false;\n               table.tint = 0xcccccc;\n               table.alpha = 0.2;\n            } else {\n               table.buttonMode = true;\n               table.interactive = true;\n               table.tint = 0x808080;\n               table.alpha = 0.7;\n            }\n\n            container.addChild(table)\n\n            table\n               .on('pointertap', (ev) => {\n                  if (activeTable) {\n                     activeTable.tint = 0x808080;\n                     activeTable.alpha = 0.7;\n                  }\n                  activeTable = ev.target;\n                  activeTable.tint = 0xFFFFFF;\n                  activeTable.alpha = 1;\n\n                  fbData.forEach(el => {\n                     if (table.id === el.id) {\n                        const discription = el.description\n                        const price = el.price\n\n                        const tableInfo = document.getElementById('tableInfo')\n                        tableInfo.innerHTML = `\n                           <p>Table â„–:${table.index}</p>\n                           <p>Description:${discription}</p>\n                           <p>Table price:${price}</p>\n                        `;\n                     }\n                  })\n                  setTable( table.uniqueId )\n\n                  \n               });\n\n            const text = new PIXI.Text(el.index,\n               {\n                  font: '2rem',\n                  fill: 0x000000,\n                  align: 'center',\n                  cacheAsBitmap: true,\n               });\n            text.type = 'text'\n            text.anchor.set(0.5);\n            container.addChild(text);\n\n            app.stage.addChild(container)\n         })\n      } else {\n         const errorMessage = new PIXI.Text('Sorry, it is not possible to book a table at the moment. \\nPlease contact the administrator',\n            {\n               font: '2rem',\n               fill: 0xFFFFFF,\n               align: 'center',\n               cacheAsBitmap: true,\n            });\n         errorMessage.width = 800;\n         errorMessage.height = 150;\n         errorMessage.type = 'text'\n         errorMessage.anchor.set(0.5);\n         errorMessage.x = app.screen.width / 2;\n         errorMessage.y = app.screen.height / 2;\n\n         background.tint = 0x979797;\n\n         background.addChild(errorMessage)\n      }\n\n\n\n      if (!localStorage.getItem('state')) {\n         ReactDOM.render(canvas, document.getElementById('canvasWrapper'))\n      }\n   }\n\n   if (answer !== 0 && loadedTables !== 0) {\n      createCanvas()\n      localStorage.setItem('state', 'loaded')\n   }\n\n   return <>\n\n   </>;\n\n};\n\nexport default userTableRender;\n","/* eslint-disable */\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as PIXI from 'pixi.js';\r\nimport firebase from 'firebase/app';\r\nimport ButtonItem from './ButtonItem';\r\nimport UserTableRender from './UserTableRender';\r\nimport 'firebase/database';\r\n\r\nconst userPanelTableRender = ({\r\n   setTable, blockedTables\r\n}) => {\r\n\r\n   const [fbData, setfbData] = useState(0);\r\n\r\n   useEffect(() => {\r\n      const fetchData = async () => {\r\n         const result = await firebase.database().ref('CanvasPreset').once('value').then((snapshot) => snapshot.val());\r\n         setfbData(result);\r\n      };\r\n      fetchData();\r\n   }, []);\r\n\r\n   return (\r\n      <div style={{ display:'flex', flexDirection:'row' }}>\r\n         <div id=\"canvasWrapper\">\r\n            {fbData ? document.getElementById('canvasWrapper') ? (<UserTableRender bgImage={fbData.bgImage} fbData={fbData.tables} setTable={setTable} blockedTables={blockedTables}/>) : 'false' : 'false'}\r\n         </div>\r\n         <div>\r\n            <div id=\"tableInfo\">\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default userPanelTableRender;"],"sourceRoot":""}